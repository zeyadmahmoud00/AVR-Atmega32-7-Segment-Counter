
7-Segment_counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001aa  0000023e  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000026d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000027b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000114c  00000000  00000000  0000030b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000721  00000000  00000000  00001457  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005ea  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00002164  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000020f  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000366  00000000  00000000  0000244f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000027b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000192  00000192  00000226  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002818  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .rodata       0000000a  00800060  000001a0  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 15 .text.main    0000005e  000000b0  000000b0  00000144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.DIO_u8SetPortDirection 00000040  0000010e  0000010e  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.DIO_u8SetPortValue 00000020  0000014e  0000014e  000001e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.HSSD_vidInit 00000008  00000184  00000184  00000218  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.HSSD_vidSetNumber 00000006  0000018c  0000018c  00000220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_fini 00000002  0000019a  0000019a  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_funcs_on_exit 00000002  0000019c  0000019c  00000230  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_simulator_exit 00000002  0000019e  0000019e  00000232  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.exit    00000016  0000016e  0000016e  00000202  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._Exit   00000004  00000196  00000196  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
   8:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
   c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  10:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  14:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  18:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  1c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  20:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  24:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  28:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  2c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  30:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  34:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  38:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  3c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  40:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  44:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  48:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  4c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>
  50:	0c 94 c9 00 	jmp	0x192	; 0x192 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 6a       	ori	r16, 0xA0	; 160
  58:	00 01       	movw	r0, r0
  5a:	a0 00       	.word	0x00a0	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d8 e0       	ldi	r29, 0x08	; 8
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	eb 35       	cpi	r30, 0x5B	; 91
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 58 00 	call	0xb0	; 0xb0 <_etext>
  a8:	0c 94 b7 00 	jmp	0x16e	; 0x16e <exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

00000192 <__bad_interrupt>:
 192:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000b0 <main>:
#include <xc.h>
#include <avr/delay.h>


int main(void)
{										//	 GFEDCBA
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	2a 97       	sbiw	r28, 0x0a	; 10
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61
	u8 Local_arrSevenSegmentNumber[10] = {0b00111111,0b0000110,0b1011011,0b1001111,0b1100110,
  c4:	8a e0       	ldi	r24, 0x0A	; 10
  c6:	e0 e6       	ldi	r30, 0x60	; 96
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	de 01       	movw	r26, r28
  cc:	11 96       	adiw	r26, 0x01	; 1
  ce:	01 90       	ld	r0, Z+
  d0:	0d 92       	st	X+, r0
  d2:	8a 95       	dec	r24
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x1e>
										   0b1101101,0b1111101,0b0000111,0b11111111,0b1101111};

	HSSD_vidInit(PORT_A);
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	0e 94 c2 00 	call	0x184	; 0x184 <HSSD_vidInit>
    while(1)
    {
        for (u8 i = 0; i < 10; ++i){
  dc:	10 e0       	ldi	r17, 0x00	; 0
  de:	14 c0       	rjmp	.+40     	; 0x108 <main+0x58>
			HSSD_vidSetNumber(PORT_A, Local_arrSevenSegmentNumber[i]);
  e0:	e1 e0       	ldi	r30, 0x01	; 1
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	ec 0f       	add	r30, r28
  e6:	fd 1f       	adc	r31, r29
  e8:	e1 0f       	add	r30, r17
  ea:	f1 1d       	adc	r31, r1
  ec:	60 81       	ld	r22, Z
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 c6 00 	call	0x18c	; 0x18c <HSSD_vidSetNumber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	2f e3       	ldi	r18, 0x3F	; 63
  f6:	8d e0       	ldi	r24, 0x0D	; 13
  f8:	93 e0       	ldi	r25, 0x03	; 3
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x4a>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x54>
 104:	00 00       	nop
										   0b1101101,0b1111101,0b0000111,0b11111111,0b1101111};

	HSSD_vidInit(PORT_A);
    while(1)
    {
        for (u8 i = 0; i < 10; ++i){
 106:	1f 5f       	subi	r17, 0xFF	; 255
 108:	1a 30       	cpi	r17, 0x0A	; 10
 10a:	50 f3       	brcs	.-44     	; 0xe0 <main+0x30>
 10c:	e7 cf       	rjmp	.-50     	; 0xdc <main+0x2c>

Disassembly of section .text.DIO_u8SetPortDirection:

0000010e <DIO_u8SetPortDirection>:
  Function Return      :  u8
  Function Argument    :  u8 Copy_u8Port, u8 u8Copy_u8PortDirectionu8Copy_u8PortDirection
  Function description :  Initialize the port direction  as input or output
 **/

 extern u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8PortDirection){
 10e:	98 2f       	mov	r25, r24
  u8 local_u8Flag = 0; /* initialized as not ok*/
  if(Copy_u8Port > 3 && Copy_u8Port < 0) local_u8Flag = PORT_ERROR; /* MSG : Port is not OK */
  if(Copy_u8PortDirection != OUTPUTPORT && Copy_u8PortDirection != INPUTPORT) local_u8Flag = DIRECTION_ERROR; /* MSG Direction not OK*/
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	86 0f       	add	r24, r22
 114:	8e 3f       	cpi	r24, 0xFE	; 254
 116:	10 f0       	brcs	.+4      	; 0x11c <DIO_u8SetPortDirection+0xe>
  Function Argument    :  u8 Copy_u8Port, u8 u8Copy_u8PortDirectionu8Copy_u8PortDirection
  Function description :  Initialize the port direction  as input or output
 **/

 extern u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8PortDirection){
  u8 local_u8Flag = 0; /* initialized as not ok*/
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	01 c0       	rjmp	.+2      	; 0x11e <DIO_u8SetPortDirection+0x10>
  if(Copy_u8Port > 3 && Copy_u8Port < 0) local_u8Flag = PORT_ERROR; /* MSG : Port is not OK */
  if(Copy_u8PortDirection != OUTPUTPORT && Copy_u8PortDirection != INPUTPORT) local_u8Flag = DIRECTION_ERROR; /* MSG Direction not OK*/
 11c:	81 e0       	ldi	r24, 0x01	; 1

  if(local_u8Flag == 0){
 11e:	81 11       	cpse	r24, r1
 120:	15 c0       	rjmp	.+42     	; 0x14c <DIO_u8SetPortDirection+0x3e>
      local_u8Flag = 1;
      switch(Copy_u8Port){
 122:	91 30       	cpi	r25, 0x01	; 1
 124:	49 f0       	breq	.+18     	; 0x138 <DIO_u8SetPortDirection+0x2a>
 126:	28 f0       	brcs	.+10     	; 0x132 <DIO_u8SetPortDirection+0x24>
 128:	92 30       	cpi	r25, 0x02	; 2
 12a:	49 f0       	breq	.+18     	; 0x13e <DIO_u8SetPortDirection+0x30>
 12c:	93 30       	cpi	r25, 0x03	; 3
 12e:	51 f0       	breq	.+20     	; 0x144 <DIO_u8SetPortDirection+0x36>
 130:	0c c0       	rjmp	.+24     	; 0x14a <DIO_u8SetPortDirection+0x3c>
      case PORT_A:
          DDRA = Copy_u8PortDirection;
 132:	6a bb       	out	0x1a, r22	; 26
  u8 local_u8Flag = 0; /* initialized as not ok*/
  if(Copy_u8Port > 3 && Copy_u8Port < 0) local_u8Flag = PORT_ERROR; /* MSG : Port is not OK */
  if(Copy_u8PortDirection != OUTPUTPORT && Copy_u8PortDirection != INPUTPORT) local_u8Flag = DIRECTION_ERROR; /* MSG Direction not OK*/

  if(local_u8Flag == 0){
      local_u8Flag = 1;
 134:	81 e0       	ldi	r24, 0x01	; 1
      switch(Copy_u8Port){
      case PORT_A:
          DDRA = Copy_u8PortDirection;
          break;
 136:	08 95       	ret
        case PORT_B:
          DDRB = Copy_u8PortDirection;
 138:	67 bb       	out	0x17, r22	; 23
  u8 local_u8Flag = 0; /* initialized as not ok*/
  if(Copy_u8Port > 3 && Copy_u8Port < 0) local_u8Flag = PORT_ERROR; /* MSG : Port is not OK */
  if(Copy_u8PortDirection != OUTPUTPORT && Copy_u8PortDirection != INPUTPORT) local_u8Flag = DIRECTION_ERROR; /* MSG Direction not OK*/

  if(local_u8Flag == 0){
      local_u8Flag = 1;
 13a:	81 e0       	ldi	r24, 0x01	; 1
      case PORT_A:
          DDRA = Copy_u8PortDirection;
          break;
        case PORT_B:
          DDRB = Copy_u8PortDirection;
          break;
 13c:	08 95       	ret
        case PORT_C:
          DDRC = Copy_u8PortDirection;
 13e:	64 bb       	out	0x14, r22	; 20
  u8 local_u8Flag = 0; /* initialized as not ok*/
  if(Copy_u8Port > 3 && Copy_u8Port < 0) local_u8Flag = PORT_ERROR; /* MSG : Port is not OK */
  if(Copy_u8PortDirection != OUTPUTPORT && Copy_u8PortDirection != INPUTPORT) local_u8Flag = DIRECTION_ERROR; /* MSG Direction not OK*/

  if(local_u8Flag == 0){
      local_u8Flag = 1;
 140:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_B:
          DDRB = Copy_u8PortDirection;
          break;
        case PORT_C:
          DDRC = Copy_u8PortDirection;
          break;
 142:	08 95       	ret
        case PORT_D:
          DDRD = Copy_u8PortDirection;
 144:	61 bb       	out	0x11, r22	; 17
  u8 local_u8Flag = 0; /* initialized as not ok*/
  if(Copy_u8Port > 3 && Copy_u8Port < 0) local_u8Flag = PORT_ERROR; /* MSG : Port is not OK */
  if(Copy_u8PortDirection != OUTPUTPORT && Copy_u8PortDirection != INPUTPORT) local_u8Flag = DIRECTION_ERROR; /* MSG Direction not OK*/

  if(local_u8Flag == 0){
      local_u8Flag = 1;
 146:	81 e0       	ldi	r24, 0x01	; 1
        case PORT_C:
          DDRC = Copy_u8PortDirection;
          break;
        case PORT_D:
          DDRD = Copy_u8PortDirection;
          break;
 148:	08 95       	ret
  u8 local_u8Flag = 0; /* initialized as not ok*/
  if(Copy_u8Port > 3 && Copy_u8Port < 0) local_u8Flag = PORT_ERROR; /* MSG : Port is not OK */
  if(Copy_u8PortDirection != OUTPUTPORT && Copy_u8PortDirection != INPUTPORT) local_u8Flag = DIRECTION_ERROR; /* MSG Direction not OK*/

  if(local_u8Flag == 0){
      local_u8Flag = 1;
 14a:	81 e0       	ldi	r24, 0x01	; 1
          DDRD = Copy_u8PortDirection;
          break;
      }
  }
  return local_u8Flag;
 }
 14c:	08 95       	ret

Disassembly of section .text.DIO_u8SetPortValue:

0000014e <DIO_u8SetPortValue>:
  u8 local_u8Flag = 0; /* initialized as not ok*/
  if(Copy_u8Port > 3 && Copy_u8Port < 0) local_u8Flag = PORT_ERROR; /* MSG : Port is not OK */

  if(local_u8Flag == 0){
    local_u8Flag = 1;
    switch(Copy_u8Port){
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	41 f0       	breq	.+16     	; 0x162 <DIO_u8SetPortValue+0x14>
 152:	28 f0       	brcs	.+10     	; 0x15e <DIO_u8SetPortValue+0x10>
 154:	82 30       	cpi	r24, 0x02	; 2
 156:	31 f0       	breq	.+12     	; 0x164 <DIO_u8SetPortValue+0x16>
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	31 f0       	breq	.+12     	; 0x168 <DIO_u8SetPortValue+0x1a>
 15c:	06 c0       	rjmp	.+12     	; 0x16a <DIO_u8SetPortValue+0x1c>
      case PORT_A:
        PORTA = Copy_u8PortValue;
 15e:	6b bb       	out	0x1b, r22	; 27
        break;
 160:	04 c0       	rjmp	.+8      	; 0x16a <DIO_u8SetPortValue+0x1c>
        case PORT_B:
          PORTB = Copy_u8PortValue;
 162:	68 bb       	out	0x18, r22	; 24
        case PORT_C:
          PORTC = Copy_u8PortValue;
 164:	65 bb       	out	0x15, r22	; 21
          break;
 166:	01 c0       	rjmp	.+2      	; 0x16a <DIO_u8SetPortValue+0x1c>
        case PORT_D:
          PORTD = Copy_u8PortValue;
 168:	62 bb       	out	0x12, r22	; 18
          break;
      }
  }

  return local_u8Flag;
}
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	08 95       	ret

Disassembly of section .text.HSSD_vidInit:

00000184 <HSSD_vidInit>:
Function Description : Initialize the 7-Segment
**/

void HSSD_vidInit(u8 Copy_u8Port){
  /* initialize the port as output*/
  DIO_u8SetPortDirection(Copy_u8Port,OUTPUTPORT);
 184:	6f ef       	ldi	r22, 0xFF	; 255
 186:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_u8SetPortDirection>
 18a:	08 95       	ret

Disassembly of section .text.HSSD_vidSetNumber:

0000018c <HSSD_vidSetNumber>:
Function Arguments : u8 Copy_u8Port
Function Description : set the 7-segment displaying number
**/

void HSSD_vidSetNumber(u8 Copy_u8Port, u8 Copy_u8Number){
  DIO_u8SetPortValue(Copy_u8Port, Copy_u8Number);
 18c:	0e 94 a7 00 	call	0x14e	; 0x14e <DIO_u8SetPortValue>
 190:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000019a <_fini>:
 19a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000019c <__funcs_on_exit>:
 19c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000019e <__simulator_exit>:
 19e:	08 95       	ret

Disassembly of section .text.exit:

0000016e <exit>:
 16e:	ec 01       	movw	r28, r24
 170:	0e 94 ce 00 	call	0x19c	; 0x19c <__funcs_on_exit>
 174:	0e 94 cd 00 	call	0x19a	; 0x19a <_fini>
 178:	ce 01       	movw	r24, r28
 17a:	0e 94 cf 00 	call	0x19e	; 0x19e <__simulator_exit>
 17e:	ce 01       	movw	r24, r28
 180:	0e 94 cb 00 	call	0x196	; 0x196 <_Exit>

Disassembly of section .text._Exit:

00000196 <_Exit>:
 196:	0e 94 56 00 	call	0xac	; 0xac <_exit>
